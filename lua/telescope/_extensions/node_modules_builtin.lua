local actions = require'telescope.actions'
local conf = require'telescope.config'.values
local entry_display = require'telescope.pickers.entry_display'
local finders = require'telescope.finders'
local from_entry = require'telescope.from_entry'
local path = require'telescope.path'
local pickers = require'telescope.pickers'
local previewers = require'telescope.previewers.term_previewer'
local utils = require'telescope.utils'

local M = {}

local function gen_from_node_modules(opts)
  local displayer = entry_display.create{
    separator = ' ',
    items = {
      {}, -- name
      {}, -- version
      {}, -- level
    },
  }

  local function make_display(entry)
    return displayer{
      entry.name,
      {entry.version, 'TelescopeResultsIdentifier'},
      {entry.level, 'TelescopeResultsComment'},
    }
  end

  return function(result)
    return {
      display = make_display,
      level = '',
      name = result.name,
      ordinal = result.dir,
      path = result.dir,
      value = result.dir,
      version = result.version,
    }
  end
end

local function package_info(dir, base)
  local fullpath = dir..'/'..base
  local json = path.read_file(fullpath..'/package.json')
  -- TODO: parse JSON totally?
  local name = json:match'"name":%s*"(.-)"'
  local version = json:match'"version":%s*"(.-)"'
  return name and version and {
    dir = fullpath,
    name = name,
    version = version,
  } or nil
end

local function iter_dir(fn, dir)
  local fd = vim.loop.fs_opendir(dir, nil, 10)
  if not fd then return end
  while true do
    local fs_entries = vim.loop.fs_readdir(fd)
    if not fs_entries then
      break
    end
    vim.tbl_map(function(fs_entry)
      if fs_entry.type == 'directory' then fn(dir, fs_entry.name) end
    end, fs_entries)
  end
  vim.loop.fs_closedir(fd)
end

M.list = function(opts)
  opts = opts or {}
  opts.cwd = utils.get_lazy_default(opts.cwd, vim.fn.getcwd)
  opts.entry_maker = utils.get_lazy_default(
    opts.entry_maker,
    gen_from_node_modules,
    opts
  )

  local results = {}

  iter_dir(function(dir, base)
    local fullpath = dir..'/'..base
    if base:sub(1, 1) == '@' then
      iter_dir(function(sub_dir, sub_base)
        table.insert(results, package_info(sub_dir, sub_base))
      end, fullpath)
    else
      table.insert(results, package_info(dir, base))
    end
  end, opts.cwd..'/node_modules')

  pickers.new(opts, {
    prompt_title = 'Packages from node_modules dir',
    finder = finders.new_table{
      results = results,
      entry_maker = opts.entry_maker,
    },
    sorter = conf.file_sorter(opts),
    previewer = previewers.cat.new(opts),
    attach_mappings = function(prompt_bufnr)
      actions._goto_file_selection:replace(function(_, cmd)
        local entry = actions.get_selected_entry()
        actions.close(prompt_bufnr)
        local dir = from_entry.path(entry)
        print(dir)
        if cmd == 'edit' then
          require'telescope.builtin'.find_files{cwd = dir}
        elseif cmd == 'new' then
          vim.cmd('cd '..dir)
          print('chdir to '..dir)
        elseif cmd == 'vnew' then
          vim.cmd('lcd '..dir)
          print('lchdir to '..dir)
        end
      end)
      return true
    end,
  }):find()
end

return M
