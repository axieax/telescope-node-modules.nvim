local actions = require'telescope.actions'
local conf = require'telescope.config'.values
local entry_display = require'telescope.pickers.entry_display'
local finders = require'telescope.finders'
local from_entry = require'telescope.from_entry'
local path = require'telescope.path'
local pickers = require'telescope.pickers'
local previewers = require'telescope.previewers.term_previewer'
local utils = require'telescope.utils'

local M = {}

local function gen_from_node_modules(opts)
  local displayer = entry_display.create{
    separator = ' ',
    items = {
      {}, -- name
      {}, -- version
      {}, -- level
    },
  }

  local function make_display(entry)
    return displayer{
      entry.name,
      entry.version,
      entry.level,
    }
  end

  return function(result)
    local name = utils.path_tail(result.dir)
    if result.org then
      name = result.org..'/'..name
    end
    return {
      value = result.dir,
      ordinal = result.dir,
      display = make_display,
      name = name,
      version = result.version,
      level = '',
    }
  end
end

M.list = function(opts)
  opts = opts or {}
  opts.cwd = utils.get_lazy_default(opts.cwd, vim.fn.getcwd)
  opts.entry_maker = utils.get_lazy_default(
    opts.entry_maker,
    gen_from_node_modules,
    opts
  )

  local results = {}

  local function package_info(dir)
    local json = path.read_file(dir..'/package.json')
    -- TODO: parse JSON totally?
    local name = json:match'"name":%s*"(.-)"'
    local version = json:match'"version":%s*"(.-)"'
    return name and version and {name = name, version = version} or nil
  end

  local function scan(dir, org)
    local directories = {}
    local fd = vim.loop.fs_opendir(dir, nil, 10)
    if not fd then return end
    while true do
      local fs_entries = vim.loop.fs_readdir(fd)
      if not fs_entries then
        break
      end
      local dir_entries = vim.tbl_filter(function(fs_entry)
        return fs_entry.type == 'directory'
      end, fs_entries)
      for _, dir_entry in ipairs(dir_entries) do
        table.insert(directories, dir_entry.name)
      end
    end
    vim.loop.fs_closedir(fd)

    for _, directory in ipairs(directories) do
      local fullpath = dir..'/'..directory
      if directory:sub(1, 1) == '@' then
        scan(fullpath, directory)
      else
        local result = package_info(fullpath)
        if result then
          if org then
            result.name = org..'/'..result.name
          end
          result.dir = fullpath
          table.insert(results, result)
        end
      end
    end
  end

  scan(opts.cwd..'/node_modules')

  pickers.new(opts, {
    prompt_title = 'Packages from node_modules dir',
    finder = finders.new_table{
      results = results,
      entry_maker = opts.entry_maker,
    },
    sorter = conf.file_sorter(opts),
    previewer = previewers.cat.new(opts),
    attach_mappings = function(prompt_bufnr)
      actions._goto_file_selection:replace(function(_, cmd)
        local entry = actions.get_selected_entry()
        actions.close(prompt_bufnr)
        local dir = from_entry.path(entry)
        if cmd == 'edit' then
          require'telescope.builtin'.find_files{cwd = dir}
        elseif cmd == 'new' then
          vim.cmd('cd '..dir)
          print('chdir to '..dir)
        elseif cmd == 'vnew' then
          vim.cmd('lcd '..dir)
          print('lchdir to '..dir)
        end
      end)
    end,
  }):find()
end

return M
