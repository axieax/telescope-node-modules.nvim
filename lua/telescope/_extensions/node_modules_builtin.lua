local actions = require'telescope.actions'
local conf = require'telescope.config'.values
local entry_display = require'telescope.pickers.entry_display'
local finders = require'telescope.finders'
local from_entry = require'telescope.from_entry'
local pickers = require'telescope.pickers'
local previewers = require'telescope.previewers.term_previewer'
local utils = require'telescope.utils'

local M = {}

local function gen_from_node_modules(opts)
  local displayer = entry_display.create{
    separator = ' ',
    items = {
      {}, -- name
      {}, -- version
      {}, -- level
    },
  }

  local function make_display(entry)
    return displayer{
      entry.name,
      entry.version,
      entry.level,
    }
  end

  return function(result)
    local name = utils.path_tail(result.dir)
    return {
      value = result.dir,
      ordinal = name,
      display = make_display,
      name = name,
      version = result.version,
      level = result.level,
    }
  end
end

M.list = function(opts)
  opts = opts or {}
  opts.entry_maker = utils.get_lazy_default(
    opts.entry_maker,
    gen_from_node_modules,
    opts
  )

  local results = {}

  pickers.new(opts, {
    prompt_title = 'Packages from node_modules dir',
    finder = finders.new_table{
      results = results,
      entry_maker = opts.entry_maker,
    },
    sorter = conf.file_sorter(opts),
    previewer = previewers.cat.new(opts),
    attach_mappings = function(prompt_bufnr)
      actions._goto_file_selection:replace(function(_, cmd)
        local entry = actions.get_selected_entry()
        actions.close(prompt_bufnr)
        local dir = from_entry.path(entry)
        if cmd == 'edit' then
          require'telescope.builtin'.find_files{cwd = dir}
        elseif cmd == 'new' then
          vim.cmd('cd '..dir)
          print('chdir to '..dir)
        elseif cmd == 'vnew' then
          vim.cmd('lcd '..dir)
          print('lchdir to '..dir)
        end
      end)
    end,
  })
end

return M
